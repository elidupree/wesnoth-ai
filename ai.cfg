[ai]
  version=1071034
  [engine]
    name="lua"
    code= <<
--! ==============================================================
helper = wesnoth.require("lua/helper.lua")

local builtin_ai_stuff = ...
local our_ai = { }
--local ai_stdlib = wesnoth.require('ai/lua/stdlib.lua')
--ai_stdlib.init(builtin_ai_funcs)

local random_hp_amount = function(stats)
  local which = math.random()
  for hp,chance in ipairs(stats.hp_amount) do
    which = which - chance
    if which <= 0 then return hp end
  end
  wesnoth.message("Whoops")
  return 1
end

local action_possible = function(action, get)
  local wactor = get.wunit(action.src.x, action.src.y)
  if not (wactor and (wactor.side == builtin_ai_stuff.side)) then
    return false
  end
  if action.type == "move" or action.type == "move_and_attack" then
    if get.wunit(action.dst.x, action.dst.y) then return false end
    local path, cost = wesnoth.find_path(wactor, action.dst.x, action.dst.y) -- TODO improve accuracy in hypotheticals
    if cost and (cost <= wactor.moves) then
    else
      return false
    end
  end
  if action.type == "attack" or action.type == "move_and_attack" then
    local wenemy = get.wunit(action.attack.x, action.attack.y)
    local real_wenemy = wesnoth.get_unit(action.attack.x, action.attack.y)
    if not (wenemy and real_wenemy and wesnoth.is_enemy(wactor.side, wenemy.side)) then
      return false
    end
    if wactor.attacks_left <= 0 then
      return false
    end
  end
  if action.type == "recruit" then
    if get.wunit(action.dst.x, action.dst.y) then return false end
    if not wesnoth.get_terrain_info(wesnoth.get_terrain(action.src.x,action.src.y)).keep then return false end
    if get.gold() < wesnoth.unit_types[action.unit_type].cost then return false end
    if not EoHS.find_path(action.src.x, action.src.y, action.dst.x, action.dst.y, function(x, y)
      return wesnoth.get_terrain_info(wesnoth.get_terrain(x, y)).castle and 1 or nil
    end)[1] then return false end
    for i,recruit_type in ipairs(wesnoth.sides[builtin_ai_stuff.side].recruit) do
      if recruit_type == action.unit_type then
        return true
      end
    end
    for i,recruit_type in ipairs(wactor.extra_recruit) do
      if recruit_type == action.unit_type then
        return true
      end
    end
  end
  return true
end

local do_action_fake = function(action, get, set)
  local wactor = get.wunit(action.src.x, action.src.y)
  if action.type == "move" or action.type == "move_and_attack" then
    local path, cost = wesnoth.find_path(wactor, action.dst.x, action.dst.y) -- TODO improve accuracy
    wactor.moves = wactor.moves - cost
    
    if wesnoth.get_terrain_info(wesnoth.get_terrain(action.src.x,action.src.y)).village then
      local owner = get.village_owner(action.dst.x, action.dst.y)
      if (not owner) or wesnoth.is_enemy(owner, builtin_ai_stuff.side) then
        set.village_owner(action.dst.x, action.dst.y, builtin_ai_stuff.side)
        wactor.moves = 0
      end
    end
    set.erase_unit(wactor.x, wactor.y)
    wactor.x = action.dst.x
    wactor.y = action.dst.y
    set.insert_unit(wactor)
  end
  if action.type == "attack" or action.type == "move_and_attack" then
    local wenemy = get.wunit(action.attack.x, action.attack.y)
    local real_wenemy = wesnoth.get_unit(action.attack.x, action.attack.y)
    local att_stats, def_stats = wesnoth.simulate_combat(wactor, action.attack.weapon, real_wenemy)
  
    wactor.hitpoints = random_hp_amount(att_stats)
    local new_real_wenemy_hp = random_hp_amount(def_stats)
    wenemy.hitpoints = wenemy.hitpoints + (new_real_wenemy_hp - real_wenemy.hitpoints)
    if (wenemy.hitpoints <= 0) then erase_unit(wenemy.x, wenemy.y) end
  end
  if action.type == "recruit" then
    set.gold(get.gold() - wesnoth.unit_types[action.unit_type].cost)
    local wrecruited = wesnoth.create_unit({
      type = action.unit_type,
      side = builtin_ai_stuff.side,
      x = action.dst.x,
      y = action.dst.y,
      moves = 0,
      attacks_left = 0,
      random_traits = false,
      random_gender = false,
      generate_name = false,
    })
    set.insert_unit(wrecruited)
  end
end

local make_simulation = function(plan)
  local wunits = wesnoth.get_units({})
  --local units = {}
  for i,wunit in ipairs(wunits) do
    wunits[wunit.x..","..wunit.y] = wesnoth.copy_unit(wunit)
    wunits[i] = nil
  end
  local sim = {
    gold = wesnoth.sides[builtin_ai_stuff.side].gold,
    --units = units,
    wunits = wunits,
    village_owner_overrides = {},
  }
  local get = {
    gold = function() return sim.gold end,
    wunit = function(x,y) return sim.wunits[x..","..y] end,
    --[[unit = function(x,y)
      local result = sim.units[x..","..y]
      if not result then
        result = sim.wunits[x..","..y].__cfg
        sim.units[x..","..y] = result
      end
      return result
    end,]]
    village_owner = function(x,y) return sim.village_owner_overrides[x..","..y] or wesnoth.get_village_owner(x,y) end,
  }
  local set = {
    gold = function(g) sim.gold = g end,
    village_owner = function(x,y,o) sim.village_owner_overrides[x..","..y] = o end,
    erase_unit = function(x,y) --[[sim.units[x..","..y] = nil;]] sim.wunits[x..","..y] = nil end,
    insert_unit = function(wunit--[[, unit]]) sim.wunits[wunit.x..","..wunit.y] = wunit--[[; sim.units[wunit.x..","..wunit.y] = unit]] end,
  }
  sim.get = get
  sim.set = set
  return sim
end

local plan_with_random_change = function(plan)
  local actions_executed_first = math.random(0, #plan) -- TODO make deterministic
  local sim = make_simulation(plan)
  for i=1,actions_executed_first do
    if action_possible(plan[i], sim.get) then
      do_action_fake(plan[i], sim.get, sim.set)
    end
  end
  local added_action_choices = {}
  for key,wunit in pairs(sim.wunits) do -- TODO make deterministic
    if wunit.side == builtin_ai_stuff.side then
      local src = { x = wunit.x, y = wunit.y }
      
      if wunit.canrecruit then
        if wesnoth.get_terrain_info(wesnoth.get_terrain(wunit.x,wunit.y)).keep then
          for i,recruit_dst in ipairs(EoHS.find_reach(wunit.x,wunit.y,function(x, y)
                    return wesnoth.get_terrain_info(wesnoth.get_terrain(x, y)).castle and 1 or nil
                  end)) do
            if not sim.get.wunit(recruit_dst.x, recruit_dst.y) then
              for i,recruit_type in ipairs(wesnoth.sides[builtin_ai_stuff.side].recruit) do
                if wesnoth.unit_types[recruit_type].cost <= sim.gold then
                  table.insert(added_action_choices, { type = "recruit", src = src, dst = recruit_dst, unit_type = recruit_type })
                end
              end
              for i,recruit_type in ipairs(wunit.extra_recruit) do
                if wesnoth.unit_types[recruit_type].cost <= sim.gold then
                  table.insert(added_action_choices, { type = "recruit", src = src, dst = recruit_dst, unit_type = recruit_type })
                end
              end
            end
          end
        end
      end
      
      local dsts = EoHS.find_reach(wunit.x,wunit.y,function(x, y)
        return wesnoth.unit_movement_cost(wunit, wesnoth.get_terrain(x, y))
      end, wunit.moves)
      for i,dst in ipairs(dsts) do
        local attack_type = "attack"
        if (dst.x ~= wunit.x) or (dst.y ~= wunit.y) then
          table.insert(added_action_choices, { type = "move", src = src, dst = dst })
          attack_type = "move_and_attack"
        end
        
        for x,y in helper.adjacent_tiles(dst.x, dst.y) do
          local wneighbor = sim.get.wunit(x,y)
          if wneighbor and wesnoth.is_enemy(wunit.side, wneighbor.side) then
            --TODO for each weapon "weapon" the unit has do
              table.insert(added_action_choices, { type = attack_type, src = src, dst = dst, attack = { x = wneighbor.x, y = wneighbor.y, weapon = 0 }})
            --end
          end
        end
      end
    end
  end
  
  local new_plan = EoHS.deep_copy(plan)
  
  if (math.random(2) == 1) and added_action_choices[1] then
    table.insert(new_plan, actions_executed_first+1, added_action_choices[math.random(#added_action_choices)])
  elseif plan[1] then
    local removal_index = math.random(table.getn(plan))
    local action_removed = new_plan[removal_index]
    table.remove(new_plan, removal_index)
    --[[if (action_removed.type == "move") or (action_removed.type == "move_and_attack") then
      local i = removal_index
      while new_plan[i] do
        if new_plan[i].uid == action_removed.uid then table.remove(new_plan, i)
        else i = i + 1 end
      end
    end]]
  end
  return new_plan
end

local evaluate_plan = function(plan)
 -- TODO better values
  local sim = make_simulation(plan)
  for i,action in ipairs(plan) do
    if action_possible(action, sim.get) then
      do_action_fake(action, sim.get, sim.set)
    end
  end
  local evaluation = 0
  for key,wunit in pairs(sim.wunits) do
    local unit_value = wunit.hitpoints + wunit.max_hitpoints
    if wesnoth.is_enemy(wunit.side, builtin_ai_stuff.side) then
      evaluation = evaluation - unit_value
    else
      evaluation = evaluation + unit_value
    end
  end
  evaluation = evaluation + 10 * #sim.village_owner_overrides
  return evaluation
end

local real_get = {
  gold = function() return wesnoth.sides[builtin_ai_stuff.side].gold end,
  --unit = function(x,y) return wesnoth.get_unit(x,y).__cfg end,
  wunit = wesnoth.get_unit,
  village_owner = wesnoth.get_village_owner,
}

function our_ai:do_moves()
  local ai_context = {in_event=false, unison=false, synchronized=false, disunified_unit_tables={}}
  local old_context = EoHS.context
  EoHS.context = ai_context
  local current_plan = {}
  local current_eval = evaluate_plan(current_plan)
  
  local max_countdown = 10000
  local countdown = max_countdown
  
  while countdown > 0 do
    local new_plan = plan_with_random_change(current_plan)
    local new_eval = evaluate_plan(new_plan)
    
              lol = (lol or 0) + 1
    if (new_eval >= current_eval) --[[or math.random() < (countdown / max_countdown)]] then
      --        EoHS.debug("foo "..current_eval)
      --        EoHS.debug(new_plan)
      current_plan = new_plan
      current_eval = new_eval
    end
    countdown = countdown - 100
  end
  
  for i,action in ipairs(current_plan) do
    if action_possible(action, real_get) then
      -- TODO what if interrupted
      if action.type == "move" or action.type == "move_and_attack" then
        EoHS.debug("move "..action.src.x.." "..action.src.y.." "..action.dst.x.." "..action.dst.y)
        EoHS.context = old_context
        builtin_ai_stuff.move(action.src.x, action.src.y, action.dst.x, action.dst.y)
        old_context = EoHS.context
        EoHS.context = ai_context
      end
      if action.type == "attack" or action.type == "move_and_attack" then
        if wesnoth.get_unit(action.attack.x, action.attack.y) then
          EoHS.context = old_context
          builtin_ai_stuff.attack(action.dst.x, action.dst.y, action.attack.x, action.attack.y, action.attack.weapon)
          old_context = EoHS.context
          EoHS.context = ai_context
        end
      end
      if action.type == "recruit" then
        EoHS.context = old_context
        builtin_ai_stuff.recruit(action.unit_type, action.dst.x, action.dst.y)
        old_context = EoHS.context
        EoHS.context = ai_context
      end
    end
  end
  
  --local units = wesnoth.get_units({ side = builtin_ai_stuff.side })
  --for i,unit in ipairs(units) do
  --  builtin_ai_stuff.move_full(unit.x, unit.y, unit.x, unit.y)
  --end
  EoHS.context = old_context
end

return our_ai
--! ==============================================================
>>
  [/engine]
  [stage]
    engine="lua"
    code="(...):do_moves()"
  [/stage]
[/ai]

