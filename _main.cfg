#ifdef MULTIPLAYER

[era]
    id=era_default_lua
    name= _ "Default / Lua AI"

    {ERA_DEFAULT}
    
    [event]
      name=start
      [set_menu_item]
        id="change_to_ai"
        image="items/book3.png~CROP(19,18,36,36)"
        description=_"Give this side to the Lua AI"
        [command]
          [modify_side]
            side=$side_number
            controller=ai
            {./ai.cfg}
          [/modify_side]
        [/command]
      [/set_menu_item]
    [/event]
[/era]

[multiplayer]
    id=multiplayer_Cynsaun_Battlefield_LAI
    name= _ "Cynsaun+LAI"
    map_data="{multiplayer/maps/2p_Cynsaun_Battlefield.map}"
    description= _ "Cynsaun Province was named for Warrior-Queen Cynsaun the First, who drove the necromancers from these lands in 961 YW."
    random_start_time="no"

    {DEFAULT_SCHEDULE}
    {DEFAULT_MUSIC_PLAYLIST}

    [side]
            {./ai.cfg}
        side=1
        canrecruit=yes
        controller=human
        team_name=north
        user_team_name= _ "teamname^North"
        gold=150
        village_gold=2
        fog=yes
    [/side]
    [side]
            #{./ai.cfg}
        side=2
        canrecruit=yes
        controller=human
        team_name=south
        user_team_name= _ "teamname^South"
        gold=150
        village_gold=2
        fog=yes
        [village]
            x=5
            y=38
        [/village]
        [village]
            x=7
            y=41
        [/village]
    [/side]
[/multiplayer]


[multiplayer]
id=Tiny_Close_Relation_LAI
name="MC_AI+(Tiny) Close Relation (2p)"
description="The Close Relation
Part of the Tiny Maps Pack
For 2 players

Created by Belbog."

map_data="border_size=1
usage=map

Mm^Xm       , Mm^Xm       , Mm^Xm       , Ww          , Md^Xm       , Md^Xm       , Md^Xm       
Mm^Xm       , Mm^Xm       , Cud         , Ww          , Ce          , Md^Xm       , Md^Xm       
Mm^Xm       , 2 Kud       , Cud         , Wwf         , Ce          , 1 Ke        , Md^Xm       
Mm^Xm       , Mm^Vhh      , Mm^Xm       , Ww          , Md^Xm       , Mm^Vc       , Md^Xm       
Mm^Xm       , Mm^Xm       , Mm^Xm       , Ww          , Md^Xm       , Md^Xm       , Md^Xm "
{DEFAULT_SCHEDULE}
{DEFAULT_MUSIC_PLAYLIST}

turns = -1

[event]
name=preload
{./inspect.cfg}
[/event]

[side]
side=1
team_name=1
controller=human
canrecruit=yes
gold=40
income=0
fog=no
village_gold=3
team_lock=yes
[/side]

[side]
            {./ai_rnn.cfg}
side=2
team_name=2
controller=human
canrecruit=yes
gold=40
income=0
fog=no
village_gold=3
team_lock=yes
[/side]





# Hackily include some of the code from Modular Multiplayer Campaign
# in order to repeat the same scenario multiple times within the same lua context

[event]
name=preload
[lua]
code=<<--mmcbs
helper = wesnoth.require ("lua/helper.lua")

MMC = MMC or {}
MMC.heal_unit = function (unit)
  unit.hitpoints = unit.max_hitpoints
  unit.status.poisoned = false
  unit.status.slowed = false
end
MMC.factions = {}
for faction in helper.child_range (wesnoth.game_config.era, "multiplayer_side") do
  if not faction.random_faction then table.insert (MMC.factions, faction) end
end
MMC.random_leader = function (faction)
  local leader_type =helper.rand (faction.random_leader)
  -- fall back to leader= and resist errors caused by buggy eras
  while not (leader_type and wesnoth.unit_types [leader_type]) do
    leader_type = helper.rand (faction.leader)
  end
  return leader_type
end
MMC.begin_scenario = function ()
  scenario_began_turn = wesnoth.current.turn
  local units = wesnoth.get_units ({})
  for I, unit in ipairs (units ) do
    wesnoth.extract_unit (unit)
  end

  for I, side in ipairs (wesnoth.sides) do
    side.gold = 40
    local faction = MMC.factions [helper.rand ("1.." ..  #MMC.factions)]
    wesnoth.put_unit ({
x = wesnoth.get_variable ("MMC_start_X" ..  I),
y = wesnoth.get_variable ("MMC_start_Y" ..  I),
type = MMC.random_leader (faction),
side = I,
canrecruit = true,
    })
    wesnoth.fire ("set_recruit", {side = I, recruit = faction.recruit})
  end
  scenario_began()
end







local error_message = function(msg)
  wesnoth.fire("wml_message", { logger="err", message=msg })
end

local state_size = 1000
local layers = 1
local default_density = 10

local random_matrix = function (input, output)
  local result = {output_size = output}
  if input*output <30000 then
    for index = 1, input*output do
      result [index] = math.random()*2.0 - 1.0
    end
  else
    result.sparse = default_density
    for index = 1, input*result.sparse do
      result [index*2 - 1] = math.random (1, output)
      result [index*2] = math.random()*2.0 - 1.0
    end
  end
  return result
end

local unit_size = 12
local move_size = 2 + unit_size
local attack_size = 12 + unit_size + unit_size

local unit_type_info = function (type_name)
  local result = {}
  
  return result
end

local unit_info = function (unit)
  local result = {
    unit.x, unit.y,
    unit.moves, unit.attacks_left,
    unit.hitpoints, (unit.max_experience - unit.experience),
    unit.side - 1, unit.canrecruit and 1 or 0,
    unit.max_hitpoints, unit.max_moves,
    unit.status.slowed and 1 or 0, unit.status.poisoned and 1 or 0,}
  return result
end

local inputs
inputs = {
  sides = {
    size = 4,
    generate = function ()
      local my_side = wesnoth.sides [builtin_ai_stuff.side]
      local enemy = wesnoth.sides [1]
      return {my_side.gold, my_side.total_income, enemy.gold, enemy.total_income}
    end,
  },
  unit = {
    size = unit_size,
    generate = function (unit)
      return unit_info (unit)
    end,
  },
  move = {
    size = move_size,
    generate = function (move)
      local result = {move.dst_x,move.dst_y}
      for index, value in ipairs (unit_info (move.unit)) do table.insert (result, value) end
      return result
    end,
  },
  attack = {
    size = attack_size,
    generate = function (attack)
      local defend_unit = wesnoth.get_unit (attack.dst_x, attack.dst_y)
      local attacker, defender = wesnoth.simulate_combat (attack.unit, attack.weapon or defend_unit, attack.weapon and defend_unit)
      local result = {
        attack.src_x,attack.src_y,attack.dst_x,attack.dst_y,
        attacker.hp_chance [0], defender.hp_chance [0],
        attack.unit.hitpoints - attacker.average_hp, defend_unit.hitpoints - defender.average_hp,
        attacker.slowed, attacker.poisoned, defender.slowed, defender.poisoned
      }
      for index, value in ipairs (unit_info (attack.unit)) do table.insert (result, value) end
      for index, value in ipairs (unit_info (defend_unit)) do table.insert (result, value) end
      return result
    end,
  },
  recruit = {
    size = 2,
    generate = function (recruit)
      return {recruit.dst_x, recruit.dst_y}
    end,
  },
}


local random_organism = function (signature)
  local result = {
    fitness = {wins = 0, games = 0, accumulated = 0, mutations = 0, approval_score = 0, approved_games = 0, signature = string.rep (signature, 10)},
    matrices = {output = random_matrix (state_size, 1),},
  }
  for key, value in pairs (inputs) do
    for layer = 1, layers do
      result.matrices [key.."input"..layer] = random_matrix (value.size, state_size)
      result.matrices [key.."hidden"..layer] = random_matrix (state_size, state_size)
      if layer >1 then result.matrices [key.."transfer"..layer] = random_matrix (state_size, state_size) end
    end
  end
  return result
end

local organisms = {}
for index=0, 9 do table.insert (organisms, random_organism(index)) end
local current_organism = organisms [1]

local mutate = function (first, rate)
  first.fitness.mutations = first.fitness.mutations + 1
  local result = {fitness = {wins = 0, games = 0, accumulated = 0, mutations = 0, approval_score = 0, approved_games = 0, signature = first.fitness.signature}, matrices = {},}
  local signature_swap =math.random (1, 10)
  result.fitness.signature = string.sub (result.fitness.signature, 1, signature_swap - 1)..math.random (0, 9).. string.sub (result.fitness.signature, signature_swap + 1, -1)
  for key, value in pairs (first.matrices) do
    local new_matrix = {output_size = value.output_size, sparse = value.sparse}
    if value.sparse then
      for index, entry in ipairs (value) do
        new_matrix [index] = value [index]
        if index % 2 == 0 then
          if math.random (1,1000) <= rate then
            new_matrix [index] = math.random()*2.0 - 1.0
          end
          if math.random (1,200) <= rate then
            new_matrix [index] = new_matrix [index] + (math.random()*2.0 - 1.0)*math.min(math.random (1,100),math.random (1,100))/200
          end
        else
          if math.random (1, 1000) <= rate then
            new_matrix [index] = math.random(1, value.output_size)
          end
        end
      end
    else
      for index, entry in ipairs (value) do
        new_matrix [index] = value [index]
        if math.random (1,100) <= rate then
          new_matrix [index] = math.random()*2.0 - 1.0
        end
        if math.random (1,20) <= rate then
          new_matrix [index] = new_matrix [index] + (math.random()*2.0 - 1.0)*math.min(math.random (1,100),math.random (1,100))/200
        end
      end
    end
    result.matrices [key] = new_matrix
  end
  return result
end


scenario_began = function()
  this_scenario_moves = 1 -- hack, avoid possible NaN
  fitness = 0
  for index, organism in ipairs (organisms) do
    for side in ipairs (wesnoth.sides) do
      organism.fitness.current_approval [side] = 0
    end
  end
end



imagined_moves = {}
remembered_units = {}
imagine_moves = function()
  for index, organism in ipairs (organisms) do
    organism.current_state = {hidden={}}
    for index = 1, layers do organism.current_state.hidden [index] = {} end
    process_input (organism, "sides")
  end
  local units = wesnoth.get_units ({})
  imagined_moves = {}
  remembered_units = {}
  for I, unit in ipairs (units) do
    -- deal with the awkward case of imagining during an attack_end event
    if unit.hitpoints >0 then
    
    remembered_units [unit.id] = wesnoth.copy_unit (unit)
    for index, organism in ipairs (organisms) do
      process_input (organism, "unit", unit)
    end
    if unit.side == wesnoth.current.side then
      --error_message(inspect({"unit",unit.moves, #wesnoth.find_reach (unit)}))
      for whatever, reach_info in ipairs (wesnoth.find_reach (unit)) do
        local unit_there = wesnoth.get_unit(reach_info [1], reach_info [2])
        if not unit_there then
          table.insert (imagined_moves, {type = "move", unit=unit, src_x = unit.x,src_y = unit.y,dst_x = reach_info [1],dst_y = reach_info [2]})
        end
        if not (unit_there and unit_there ~= unit) then
        
      if unit.attacks_left > 0 then
        for X, Y in helper.adjacent_tiles (reach_info [1], reach_info [2]) do
          local neighbor = wesnoth.get_unit (X, Y)
          if neighbor and wesnoth.is_enemy(unit.side, neighbor.side) then
            local index = 0
            for attack in helper.child_range (unit.__cfg, "attack") do
              index = index + 1
              local attack_move = {type = "attack", unit=unit, src_x = reach_info [1],src_y = reach_info [2],dst_x = X,dst_y = Y, weapon = nil --[[index]]}
              table.insert (imagined_moves, attack_move)
              break
            end
          end
        end
      end

        end
      end
      
      if unit.canrecruit and wesnoth.get_terrain_info (wesnoth.get_terrain (unit.x, unit.y)).keep then
        local castles = {}
        local frontier = {{unit.x, unit.y}}
        while frontier [1] do
          local current = frontier [#frontier]
          table.remove (frontier)
          for X, Y in helper.adjacent_tiles (current [1], current [2]) do
            if wesnoth.get_terrain_info (wesnoth.get_terrain (X, Y)).castle and not castles [X..","..Y] then
              castles [X..","..Y] = {X, Y}
              table.insert (frontier, {X, Y})
            end
          end
        end
        for key, value in pairs (castles) do
            if not wesnoth.get_unit (value [1], value [2]) then
              for i,recruit_type in ipairs(wesnoth.sides[wesnoth.current.side].recruit) do
                if wesnoth.unit_types[recruit_type].cost <= wesnoth.sides[wesnoth.current.side].gold then
                  table.insert (imagined_moves, {type = "recruit", dst_x = value [1], dst_y = value [2]}, recruit_type = unit_type)
                end
              end
              for i,recruit_type in ipairs(sunit.wunit.extra_recruit) do
                if wesnoth.unit_types[recruit_type].cost <= wesnoth.sides[wesnoth.current.side].gold then
                  table.insert (imagined_moves, {type = "recruit", dst_x = value [1], dst_y = value [2]}, unit_type = recruit_type)
                end
              end
            end
        end
      end
    end
    
    end
  end

  return do_move_by_type [best_move.type] (best_move)
end



local hyperbolic_tangent = function (value)
  return (math.exp (2*value) - 1)/(math.exp (2*value) + 1)
end

local multiply_into = function (vector, output, matrix)
  for index = 1, matrix.output_size do output [index] = output [index] or 0 end
  for index, input in ipairs (vector) do
    if matrix.sparse then
      for entry_index = (index-1)*matrix.sparse + 1, index*matrix.sparse do
        output [matrix [entry_index*2 - 1]] = output [matrix [entry_index*2 - 1]] + input*matrix [entry_index*2]
      end
    else
      for output_index = 1, matrix.output_size do
        output [output_index] = output [output_index] + input*matrix [output_index + (index-1)*matrix.output_size]
      end
    end
  end
end

local next_hidden = function (organism, input_type, input)
  local result = {}
  for layer = 1, layers do
    local next_hidden = {}
    multiply_into (organism.current_state.hidden[layer], next_hidden, organism.matrices [input_type.."hidden"..layer])
    if layer >1 then multiply_into (result [layer - 1], next_hidden, organism.matrices [input_type.."transfer"..layer]) end
    multiply_into (input, next_hidden, organism.matrices [input_type.."input"..layer])
    for index, value in ipairs (next_hidden) do
      next_hidden [index] = hyperbolic_tangent (value)
    end
    result [layer] = next_hidden
  end
  return result
end

local process_input = function (organism, input_type, input)
  organism.current_state.hidden = next_hidden (organism, input_type, inputs [input_type].generate (input))
end
local evaluate = function (organism, input_type, input)
  if input_type == "end_turn" then return 0 end
  local output = {}
  multiply_into (next_hidden (organism, input_type, inputs [input_type].generate (input))[layers], output, organism.matrices.output)
  return output[1]
end


move_completed = function(completed_move)  
  for index, organism in ipairs (organisms) do
    local higher_ranked = 0
    local best_evaluation = evaluate (organism, completed_move.type, completed_move)
    for I, move in ipairs (moves) do
      local evaluation = evaluate (organism, move.type, move)
      if evaluation > best_evaluation then
        higher_ranked = higher_ranked + 1
      end
    end
    if moves[2] then organism.fitness.current_approval [wesnoth.current.side] = organism.fitness.current_approval [wesnoth.current.side] + 1 - ((2*higher_ranked)/(#moves-1)) end
  end
  
  this_scenario_moves = this_scenario_moves + 1
end

local hanging_move
local hanging_imagination
local resolve_hanging = function()
  if hanging_move then
    imagined_moves, hanging_imagination = hanging_imagination, imagined_moves
    move_completed (hanging_move)
    hanging_move = nil
    imagined_moves, hanging_imagination = hanging_imagination, nil
  end
end
on_side_turn = function ()
  imagine_moves()
end
on_side_turn_end = function ()
  resolve_hanging()
end
on_moveto = function ()
  resolve_hanging()
  local unit = wesnoth.get_unit (wesnoth.current.event_context.x1,wesnoth.current.event_context.y1)
  local previous_unit = remembered_units [unit.id]
  hanging_move = {type = "move", unit = previous_unit, src_x = previous_unit.x, src_y = previous_unit.y, dst_x = unit.x, dst_y = unit.y}
  hanging_imagination = imagined_moves
  imagine_moves()
end
on_attack = function ()
  local unit = wesnoth.get_unit (wesnoth.current.event_context.x1,wesnoth.current.event_context.y1)
  local previous_unit = remembered_units [unit.id]
  local attack_move = {type = "attack", unit= unit, src_x = unit.x,src_y = unit.y,dst_x = wesnoth.current.event_context.x2,dst_y = wesnoth.current.event_context.y2, weapon = nil}
  if hanging_move and hanging_move.unit.id == unit.id then
    attack_move.unit = previous_unit
    hanging_move = attack_move  
    resolve_hanging()
  else
    resolve_hanging()
    move_completed (attack_move)
  end
end
on_attack_end = function ()
  imagine_moves()
end
on_recruit = function ()
  local unit = wesnoth.get_unit (wesnoth.current.event_context.x1,wesnoth.current.event_context.y1)
  move_completed ({type = "recruit", dst_x =wesnoth.current.event_context.x1, dst_y = wesnoth.current.event_context.y1, unit_type = unit.type})
  imagine_moves()
end

>>
[/lua]
[/event]

[event]
name=prestart
[lua]
code=<<--mmcps
local units = wesnoth.get_units ({canrecruit = true})
for I, unit in ipairs (units) do
  wesnoth.set_variable ("MMC_start_X" ..  unit.side,unit.x)
  wesnoth.set_variable ("MMC_start_Y" ..  unit.side, unit.y)
  wesnoth.extract_unit (unit)
end
wesnoth.set_variable ("MMC_scenario_number", 0)
MMC.begin_scenario ()

fitness = 0
>>
[/lua]
[/event]

[event]
name=die
first_time_only=no
[filter]
canrecruit=true
[/filter]
[lua]
code=<<--mmcd
scenario_ended()
MMC.begin_scenario ()
>>
[/lua]
[/event]


# Restart if there's a stalemate
[event]
name=side_turn
first_time_only=no
[lua]
code=<<--mmcst
on_side_turn()
if wesnoth.current.turn >scenario_began_turn + 40 then
  MMC.begin_scenario ()
end
>>
[/lua]
[/event]

[event]
name=side_turn_end
first_time_only=no
[lua]
code=<<--mmcst
on_side_turn_end()
>>
[/lua]
[/event]

[event]
name=attack_end
first_time_only=no
[lua]
code=<<--mmcst
on_attack_end()
>>
[/lua]
[/event]


[event]
name=recruit
first_time_only=no
[lua]
code=<<--mmcst
on_recruit()
>>
[/lua]
[/event]


[event]
name=moveto
first_time_only=no
[lua]
code=<<--mmcst
on_moveto()
>>
[/lua]
[/event]



# Reward the AI a bit for dealing damage
[event]
name=attacker_hits
first_time_only=no
[lua]
code=<<--mmah
if wesnoth.current.side == 1 then fitness = fitness + wesnoth.get_variable ("damage_inflicted") or 0 end
>>
[/lua]
[/event]
[event]
name=defender_hits
first_time_only=no
[lua]
code=<<--mmdh
if wesnoth.current.side == 2 then fitness = fitness + wesnoth.get_variable ("damage_inflicted") or 0 end
>>
[/lua]
[/event]


[/multiplayer]
#endif

