[ai]
  version=1071034
  [engine]
    name="lua"
    code= <<--ai_rnn.cfg
--! ==============================================================
local helper = wesnoth.require("lua/helper.lua")

local builtin_ai_stuff = ...

local pack = function(...) return {...} end
local wins = 0
local total_fitness = 0
local games = 0
local survivor_games = 0

local raw_fitness = function(organism)
  if organism.fitness.approved_games == 0 then return .404 end
  return --[[(organism.fitness.wins/organism.fitness.games) + (organism.fitness.accumulated/organism.fitness.games/10000)]] organism.fitness.approval_score/organism.fitness.approved_games
end
local priority = function(organism)
  if organism.fitness.approved_games == 0 then return 1000000 end
  --return (organism.fitness.wins/organism.fitness.games) + (organism.fitness.accumulated/organism.fitness.games/10000) + (organism.fitness.wins == 0 and 0.01 or 1) * math.sqrt (0.5*math.log (survivor_games)/organism.fitness.games)
  if organism.fitness.games >0 and organism.fitness.wins == 0 then return -organism.fitness.games end
  return raw_fitness (organism) + math.sqrt (1/(1+organism.fitness.games))
end
local promise = function(organism)
  if organism.fitness.approved_games == 0 then return 1000000 end
  if organism.fitness.games >0 and organism.fitness.wins == 0 then return -organism.fitness.games end
  return raw_fitness (organism) + math.sqrt (1/(1+organism.fitness.games))
end
local proof = function(organism)
  if organism.fitness.games == 0 then return -1000000 end
  return (organism.fitness.wins/organism.fitness.games) + (organism.fitness.accumulated/organism.fitness.games/10000) - math.sqrt ((2 + organism.fitness.mutations)/organism.fitness.games)
end

local format_organism = function (organism)
  return string.format (organism.fitness.signature.." ("..organism.fitness.wins.. "/"..organism.fitness.games.. ", %.3f)", raw_fitness (organism))
end

scenario_ended = function()
  games = games + 1
  survivor_games = survivor_games + 1
  current_organism.fitness.games = current_organism.fitness.games + 1
  current_organism.fitness.accumulated = current_organism.fitness.accumulated + fitness
  total_fitness = total_fitness + fitness

  local units = wesnoth.get_units ({})
  local win = false
  local sides_defeated = {}
  for I, unit in ipairs (units) do
    if unit.canrecruit and unit.hitpoints <= 0 then
      if wesnoth.is_enemy (unit.side,builtin_ai_stuff) then
        -- we won the game! Amazing!
        win = true
        wins = wins + 1
        current_organism.fitness.wins = current_organism.fitness.wins + 1
      end
      sides_defeated [unit.side] = true
    end
  end
  --error_message(inspect(organisms,{depth=2}))
  
  for index, organism in ipairs (organisms) do
    organism.fitness.approved_games = organism.fitness.approved_games + 1
    for side in ipairs (wesnoth.sides) do
      organism.fitness.approval_score = organism.fitness.approval_score + organism.fitness.current_approval [side]*(sides_defeated [side] and -1 or 1)/(this_scenario_moves*#wesnoth.sides)
    end
  end
  
  local worst_index = 1
  local best = organisms[1]
  for index, organism in ipairs (organisms) do
    if priority (organism) > priority (current_organism) then
      current_organism = organism
    end
    if proof (organism) > proof (best) then
      best = organism
    end
    if promise (organism) <promise (organisms [worst_index]) then
      worst_index = index
    end
  end
  local worst = organisms [worst_index]
  
  error_message ("Game over. Wins: ".. wins.."/"..games..". Average non-win fitness so far: ".. string.format ("%.3f", total_fitness/games)..". Next up: ".. format_organism (current_organism))

  
  if games % 10 == 0 or (games % 2 == 0 and worst.fitness.wins == 0) then
    error_message ("Mutating ".. format_organism (best)..", dropping: ".. format_organism (worst)..".")
    survivor_games = survivor_games - worst.fitness.games
    table.remove (organisms, worst_index)
    if math.random (1, 20) == 1 or raw_fitness(best) < math.random()/3 then
      table.insert (organisms, random_organism(math.floor(games/10) % 10))
    else
      table.insert (organisms, mutate (best, math.random (1,3)*math.random (1,4)))
    end
  end
  
  --if games % 50 == 0 then
    local display = {}
    for index, organism in ipairs (organisms) do
      table.insert (display, format_organism (organism))
    end
    error_message ("All organisms:\n" .. table.concat (display, "\n"))
  --end
  
  scenario_began()
end

local do_move_by_type = {
  move = function(move) builtin_ai_stuff.move(move.unit, move.dst_x, move.dst_y) end,
  attack = function(move) 
    if move.unit.x ~= move.src_x or move.unit.y ~= move.src_y then
      builtin_ai_stuff.move(move.unit, move.src_x, move.src_y)
    end
    -- TODO: handle invalidation by events
    builtin_ai_stuff.attack(move.src_x, move.src_y, move.dst_x, move.dst_y, move.weapon and move.weapon-1)
  end,
  recruit = function(move) builtin_ai_stuff.recruit(move.unit_type, move.dst_x, move.dst_y) end,
  end_turn = function() return true end,
}


local calculate_and_do_one_move = function()
  imagine_moves()
  
  local best_value = 0
  local best_move = {type = "end_turn"}
  for I, move in ipairs (moves) do
    local evaluation = evaluate (current_organism, move.type, move)
    --error_message(inspect({move,evaluation}))
    if evaluation >best_value then
      best_value = evaluation
      best_move = move
    end
  end
  
  return do_move_by_type [best_move.type] (best_move)
end


local our_ai = { }
function our_ai:do_moves()
  for hack=1,100 do
    if calculate_and_do_one_move() then break end
  end
  
  local units = wesnoth.get_units ({})
  for I, unit in ipairs (units) do
    if unit.side == wesnoth.current.side then
      builtin_ai_stuff.stopunit_all(unit)
    end
  end
end

return our_ai
--! ==============================================================
>>
  [/engine]
  [stage]
    engine="lua"
    code="(...):do_moves()"
  [/stage]
[/ai]

