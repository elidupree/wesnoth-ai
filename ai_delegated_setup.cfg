[event]
name=preload
[lua]
code=<<--delegated_setup
helper = wesnoth.require ("lua/helper.lua")
require = nil
JSON = wesnoth.require ("~add-ons/wesnoth-ai/dkjson.lua")

error_message = function(msg, chat)
  wesnoth.log("err", msg, chat or false)
end

inform_rust = function (message)
  error_message ("\nLua_to_Rust_transfer\n"..message.."\nEnd_Lua_to_Rust_transfer\n")
end

local previous_message_index
receive_from_rust = function ()
  while true do
    wesnoth.fire ("delay", {time = 10})
    if wesnoth.have_file("~add-ons/wesnoth-ai/temp/ready") and wesnoth.have_file("~add-ons/wesnoth-ai/temp/message.json") then
      local message = wesnoth.read_file("~add-ons/wesnoth-ai/temp/message.json")
      if message then
        message = JSON.decode(message)
        if message and  message.index ~= previous_message_index and (previous_message_index or message.index==0) then
          previous_message_index = message.index
          error_message ("received "..inspect (message))
          return message.data
        end
      end
    end
  end
end

local terrains_list = {}
local terrains_map = {}
local discover_terrain = function (terrain)
  if not terrains_map [terrain] then
    local info = wesnoth.get_terrain_info (terrain)
    table.insert (terrains_list, {
      string = terrain,
      castle = info.castle,
      keep = info.keep,
      village = info.village,
      healing = info.healing,
    })
    terrains_map [terrain] = #terrains_list
  end
end

local alignments = {lawful = 1, chaotic = -1, neutral = 0}
local damage_types = {blade = 0, pierce = 1, impact = 2, fire = 3, cold = 4, arcane = 5}
local times_of_day = {dawn = 0, morning = 1, afternoon = 2, dusk = 3, first_watch = 4, second_watch = 5,}
convert_unit = function (unit)
  local config = unit.__cfg
  local result = {
    x = unit.x, y = unit.y,
    side = unit.side-1,
    attacks_left = unit.attacks_left,
    canrecruit = unit.canrecruit,
    experience = unit.experience, hitpoints = unit.hitpoints,
    moves = unit.moves,
    resting = unit.resting,
    slowed = unit.status.slowed or false,
    poisoned = unit.status.poisoned or false,

    unit_type = {
      alignment = alignments [config.alignment] or 0,
      cost = config.cost,
      level = config.level, max_experience = unit.max_experience,
      max_hitpoints = unit.max_hitpoints, max_moves = unit.max_moves,
      not_living = unit.status.not_living or false,
      zone_of_control = config.zoc,
      defense = {},
      movement_costs = {},
      resistance = {},
      attacks = {},
      skirmisher = false,
      regeneration = 0,
      fearless = false,
    },
  }
  for index, info in ipairs (terrains_list) do
    result.unit_type.defense [index] = wesnoth.unit_defense (unit, info.string)
    result.unit_type.movement_costs [index] = wesnoth.unit_movement_cost (unit, info.string)
  end
  for damage_type, index in pairs (damage_types) do
    result.unit_type.resistance [index+1] = wesnoth.unit_resistance (unit, damage_type)
  end
  for abilities in helper.child_range (config, "abilities") do
    for index, ability in ipairs (abilities) do
      if result.unit_type [ability [2].id] == false then result.unit_type [ability [2].id] = true end
      if ability [1] == "regenerate" then result.unit_type.regeneration = ability [2].value end
    end
  end
  for modifications in helper.child_range (config, "modifications") do
    for trait in helper.child_range (modifications, "trait") do
      if result.unit_type [trait.id] == false then result.unit_type [trait.id] = true end
    end
  end
  for attack in helper.child_range (config, "attack") do
    local attack_info = {
      damage = attack.damage,
      number = attack.number,
      damage_type = damage_types [attack.type],
      range = attack.range,
      charge = false,
      magical = false,
      marksman = false,
      poison = false,
      slow = false,
    }
    for specials in helper.child_range (attack, "specials") do
      for index, special in ipairs (specials) do
        if attack_info [special[2].id] == false then attack_info [special[2].id] = true end
      end
    end
    table.insert (result.unit_type.attacks, attack_info)
  end
  return result
end

convert_location = function (X, Y, ignore_unit)
  local unit = wesnoth.get_unit (X, Y)
  local owner = wesnoth.get_village_owner (X, Y)
  local terrain =wesnoth.get_terrain (X, Y)
  discover_terrain(terrain)
  return {
    terrain = terrains_map [terrain]-1,
    village_owner = owner and (owner-1) or nil,
    unit = (not ignore_unit) and unit and convert_unit(unit) or nil,
  }
end


dump_map = function ()
  local width, height = wesnoth.get_map_size()
  map = {
    config = {
      unit_type_examples = {},
      terrain_info = {},
      factions = {},
    },
    width = width,
    height = height,
    locations = {},
    starting_locations = {},
  }
  for Y = 1, height do for X = 1, width do
    local terrain =wesnoth.get_terrain (X, Y)
    discover_terrain(terrain)
    map.locations [X + (Y-1)*width] = convert_location (X, Y, true)
  end end
  local do_unit_type = function (unit_type)
    map.config.unit_type_examples [unit_type] = convert_unit (wesnoth.create_unit ({type = unit_type, side = 1, random_traits = false, random_gender = false, generate_name = false}), map.config.terrain_info)
  end
  for faction in helper.child_range (wesnoth.game_config.era, "multiplayer_side") do
    if faction.recruit then
      local converted = {recruits = {}, leaders = {}}
      for recruit in string.gmatch (faction.recruit, "[^,]+") do
        do_unit_type (recruit)
        table.insert (converted.recruits, recruit)
      end
      for leader in string.gmatch (faction.leader, "[^,]+") do
        do_unit_type (leader)
        table.insert (converted.leaders, leader)
      end
      table.insert (map.config.factions, converted)
    end
  end
  for side in pairs (wesnoth.sides) do
    local location = wesnoth.get_starting_location (side)
    table.insert (map.starting_locations, location)
  end
  map.config.terrain_info = terrains_list
  
  return map
end

dump_map()

--inform_rust(JSON.encode (map))

dump_all_to_rust = function ()
  if wesnoth.current.side == 1 then return end
  local width, height = wesnoth.get_map_size()
  local locations = {}
  for Y = 1, height do for X = 1, width do
    locations [X + (Y-1)*width] = convert_location (X, Y, false)
  end end
  local sides = {}
  for side, info in ipairs (wesnoth.sides) do
    local enemies = {}
    for other in ipairs (wesnoth.sides) do
      table.insert (enemies, wesnoth.is_enemy (side, other))
    end
    local recruits = {}
    
    table.insert (sides, {gold = info.gold, enemies = enemies, recruits = info.recruit})
  end
  inform_rust(JSON.encode ({
    map = dump_map(),
    current_side = wesnoth.current.side - 1,
    locations = locations,
    sides = sides,
    time_of_day = times_of_day[wesnoth.get_time_of_day().id],
    turn = 1,
    max_turns = 40, -- TODO
    scores = nil,
  }))
end




scenario_began = function()
  --dump_all_to_rust()
end
on_side_turn = function ()
end
on_turn_refresh = function ()
  --dump_all_to_rust()
end
on_side_turn_end = function ()
  if hidden_gold then
    wesnoth.sides [wesnoth.current.side].gold = hidden_gold
    hidden_gold = nil
  end
end
on_moveto = function ()
  --dump_all_to_rust()
  --error_message ("moveto", true)
end
on_attack = function ()
  
end
on_attack_end = function ()
  --dump_all_to_rust()
  --error_message ("attack_end", true)
end
on_recruit = function ()
  --dump_all_to_rust()
  --error_message ("recruit", true)
end

hidden_gold = nil

>>
[/lua]
[/event]
