[event]
name=preload
[lua]
code=<<--delegated_setup
helper = wesnoth.require ("lua/helper.lua")
require = nil
JSON = wesnoth.require ("~add-ons/wesnoth-ai/dkjson.lua")

error_message = function(msg)
  wesnoth.log("err", msg, false)
end

inform_rust = function (message)
  error_message ("Lua_to_Rust_transfer"..message.."End_Lua_to_Rust_transfer")
end

local alignments = {lawful = 1, chaotic = -1, neutral = 0}
convert_unit = function (unit)
  local config = unit.__cfg
  local result = {
    x = unit.x, y = unit.y,
    side = unit.side,
    alignment = alignments [config.alignment] or 0,
    attacks_left = unit.attacks_left,
    canrecruit = unit.canrecruit,
    cost = config.cost,
    experience = unit.experience, hitpoints = unit.hitpoints,
    level = config.level, max_experience = unit.max_experience,
    max_hitpoints = unit.max_hitpoints, max_moves = unit.max_moves,
    moves = unit.moves,
    resting = unit.resting,
    slowed = unit.status.slowed or false,
    poisoned = unit.status.poisoned or false,
    not_living = unit.status.not_living or false,
    zone_of_control = config.zoc,
    defense = {},
    movement_costs = {},
    resistance = {},
    attacks = {},
  }
  for key, value in pairs (map.config.terrain_info) do
    result.defense [key] = wesnoth.unit_defense (unit, key)
    result.movement_costs [key] = wesnoth.unit_movement_cost (unit, key)
  end
  for key, value in pairs ({fire = true, cold = true, arcane = true, blade = true, pierce = true, impact = true}) do
    result.resistance [key] = wesnoth.unit_resistance (unit, key)
  end
  for attack in helper.child_range (config, "attack") do
    table.insert (result.attacks, {
      damage = attack.damage,
      number = attack.number,
      damage_type = attack.type,
      range = attack.range,
    })
  end
  return result
end


dump_map = function ()
  local width, height = wesnoth.get_map_size()
  map = {
    config = {
      unit_type_examples = {},
      terrain_info = {},
      factions = {},
    },
    width = width,
    height = height,
    locations = {},
    starting_locations = {},
  }
  for Y = 1, height do for X = 1, width do
    local terrain =wesnoth.get_terrain (X, Y)
    local info = wesnoth.get_terrain_info (terrain)
    map.config.terrain_info [terrain] = {
      castle = info.castle,
      keep = info.keep,
      village = info.village,
      healing = info.healing,
    }
    map.locations [X + (Y-1)*width] = {
      terrain = terrain,
      village_owner = wesnoth.get_village_owner (X, Y) or 0,
      unit = nil,
    }
  end end
  local do_unit_type = function (unit_type)
    map.config.unit_type_examples [unit_type] = convert_unit (wesnoth.create_unit ({type = unit_type, side = 1, random_traits = false, random_gender = false, generate_name = false}), map.config.terrain_info)
  end
  for faction in helper.child_range (wesnoth.game_config.era, "multiplayer_side") do
    if faction.recruit then
      local converted = {recruits = {}, leaders = {}}
      for recruit in string.gmatch (faction.recruit, "[^,]+") do
        do_unit_type (recruit)
        table.insert (converted.recruits, recruit)
      end
      for leader in string.gmatch (faction.leader, "[^,]+") do
        do_unit_type (leader)
        table.insert (converted.leaders, leader)
      end
      table.insert (map.config.factions, converted)
    end
  end
  for side in pairs (wesnoth.sides) do
    local location = wesnoth.get_starting_location (side)
    table.insert (map.starting_locations, location)
  end
  
  return map
end

dump_map()

inform_rust(JSON.encode (map))


>>
[/lua]
[/event]

{./rust_lua_shared.cfg}
